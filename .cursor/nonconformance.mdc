---
description: 부적합 등록/관리 페이지를 개발하거나 6M 분석, 5Why 분석 기능을 구현할 때 참고
globs:
alwaysApply: false
lastUpdated: 2025-10-15
---

## 최근 업데이트 내역 (2025-10-15)

### 코드 재정렬 기능 추가
1. **불량 유형 드래그 앤 드롭 재정렬**:
   - 유형/원인 관리 모달에서 불량 유형(Dxx) 드래그 앤 드롭 지원
   - 햄버거 아이콘(☰)으로 시각적 피드백
   - 재정렬 시 DefectType의 code 필드를 교환 (기존 내역이 원래 유형을 따라감)
   - 예: D01/파손과 D02/소재기인을 바꾸면 코드 자체가 교환됨
   - 트랜잭션 기반 안전한 업데이트 (임시 코드 사용)
   - 감사 로그 자동 기록

2. **발생 원인 드래그 앤 드롭 재정렬**:
   - 메이저 그룹(M1, M2...) 단위로 그룹화하여 표시
   - 같은 메이저 그룹 내에서만 드래그 앤 드롭 가능
   - 재정렬 시 DefectCause의 code 필드를 교환
   - 트랜잭션 기반 안전한 업데이트
   - 감사 로그 자동 기록

3. **NCR NO 자동 채우기**:
   - 부적합 등록 탭 진입 시 다음 NCR NO 자동 생성 (NCR-YYYY-NNN 형식)
   - 사용자가 수정 가능 (편의성)
   - 연도별 순차 번호 관리

### 버그 수정
1. **모달 표시 문제 해결**:
   - `NonconformanceListSerializer`에 누락된 필드 추가
   - 상세 정보 모달에서 발견공정, 공정/부서, 작업자, 5Why 분석, 비고 정상 표시
   - 수정 모달에서 모든 필드 정상 표시 및 편집 가능

2. **외래키 처리 개선**:
   - `defect_type_code`, `cause_code` 필드를 `SlugRelatedField`로 변경
   - API에서 코드 문자열을 직접 송수신 (ID 대신)
   - 프론트엔드 호환성 향상

## 최근 업데이트 내역 (2025-10-04)

### UI/UX 개선
1. **사이드바 추가**: 대시보드와 동일한 네비게이션 제공
2. **배지 색상 통일**: 사내(primary/파란색), 수입(secondary/보라색)
3. **입력 값 검증 강화**: 
   - 부적합 수량: 정수(int) 타입, 1 이상, step=1
   - 단가: 정수(int) 타입, 0 이상, step=1 (원 단위)
   - 가중치: 실수(float) 타입, 0~1, step=0.01
   - 실시간 유효성 검사 및 즉각적인 에러 메시지 표시
4. **Toast 알림**: 모든 CRUD 작업에 sonner 라이브러리 사용
5. **필터링 개선**: 
   - 반응형 레이아웃 (3행 구조)
   - 통합 검색창에서 Enter 키 지원
   - 초기화 버튼 추가
6. **목록 인터랙션**: 행 클릭으로 상세 모달 열기, hover 효과
7. **상세 모달 디자인**: 섹션별 색상 구분, 카드 레이아웃, 발견공정 한글 매핑
8. **삭제 확인 모달**: 커스텀 모달로 개선 (경고 아이콘, 상세 정보 표시)
9. **6M 가이드**: 등록 탭 카드 헤더로 이동 (접근성 향상)

### 기능 추가
1. **부적합 유형/원인 관리 모달**: 
   - 불량 유형 추가/삭제 (프론트엔드 + 백엔드 완료)
   - 발생 원인 추가/삭제 (프론트엔드 + 백엔드 완료)
   - 6M 카테고리 조회
   - 실무자 이상 권한 체크
   - 사용 중인 코드 삭제 방지
   - 감사 로그 자동 기록

## 라우트 (URL)

### 부적합 관리
- `/` - 부적합 목록 조회 (GET)
- `/create/` - 부적합 등록 (POST, 실무자 이상)
- `/<int:id>/` - 부적합 상세 조회 (GET)
- `/<int:id>/update/` - 부적합 수정 (PUT/PATCH, 실무자 이상)
- `/<int:id>/delete/` - 부적합 삭제 (DELETE, 실무자 이상, 물리삭제)

### 코드 테이블 조회
- `/defect-types/` - 불량 유형 목록 조회 (GET)
- `/defect-causes/` - 발생 원인 목록 조회 (GET, category 파라미터로 필터링 가능)
- `/six-m-categories/` - 6M 카테고리 목록 조회 (GET)
- `/six-m-guide/` - 6M 분류 가이드 정보 (GET)

### 코드 테이블 관리 (실무자 이상 권한 필요)
- `/defect-types/create/` - 불량 유형 추가 (POST, 실무자 이상)
- `/defect-types/<str:code>/delete/` - 불량 유형 삭제 (DELETE, 실무자 이상)
- `/defect-types/reorder/` - 불량 유형 순서 재정렬 (POST, 실무자 이상)
- `/defect-causes/create/` - 발생 원인 추가 (POST, 실무자 이상)
- `/defect-causes/<str:code>/delete/` - 발생 원인 삭제 (DELETE, 실무자 이상)
- `/defect-causes/reorder/` - 발생 원인 순서 재정렬 (POST, 실무자 이상)
- `/next-ncr-no/` - 다음 NCR NO 조회 (GET, 인증 필요)

### CSV 다운로드
- `/export/` - 월별 부적합 데이터 CSV 다운로드 (GET, 인증 필요)
  - Query Parameters: `year` (연도), `month` (월)
  - Response: CSV 파일 (UTF-8 BOM 포함)
  - 404: 해당 연월에 데이터 없음

## 스키마 (모델)
**DefectType 모델**: 불량 유형 코드 테이블
- `code` (CharField, 20자, PK) - 불량 유형 코드
- `name` (CharField, 100자) - 불량 유형명
- `description` (CharField, 255자) - 설명

**DefectCause 모델**: 발생 원인 코드 테이블 (6M 분류)
- `code` (CharField, 20자, PK) - 원인 코드
- `category` (CharField, 30자) - 6M 분류 (Material, Machine, Man, Method, Measurement, Environment, Other)
- `name` (CharField, 100자) - 원인명
- `description` (CharField, 255자) - 설명

**Nonconformance 모델**: 부적합 본문 테이블
- `ncr_uid` (CharField, 26자, 고유) - ULID 기반 비즈니스 식별자
- `type` (CharField) - 부적합 유형 (inhouse:사내, incoming:수입)
- `occurrence_date` (DateField) - 발생일
- `ncr_no` (CharField, 50자) - NCR 번호
- `vendor` (CharField, 100자) - 업체명
- `product_name` (CharField, 100자) - 품명
- `control_no` (CharField, 100자) - 관리번호
- `defect_qty` (PositiveIntegerField) - 부적합 수량 (정수만 허용, 개 단위)
- `unit_price` (DecimalField) - 단가 (정수 권장, 원 단위)
- `weight_factor` (DecimalField, 0~1.000) - 가중치 (0~1 사이 소수, 0.01 단위)
- `total_amount` (DecimalField, 자동계산) - 합계 (defect_qty × unit_price × weight_factor)
- `detection_stage` (CharField, 30자) - 발견공정 (incoming:수입검사, shipping:출하검사, process:공정검사)
- `defect_type_code` (ForeignKey to DefectType) - 불량유형 코드
- `cause_code` (ForeignKey to DefectCause) - 발생원인 코드
- `why1~why5` (CharField, 255자) - 5Why 분석
- `root_cause` (CharField, 255자) - 최종불량원인
- `operators` (JSONField) - 작업자 목록
- `process_name` (CharField, 100자) - 공정/부서
- `weekday_code` (CharField, 3자, 자동계산) - 요일
- `note` (TextField) - 비고
- `created_by` (ForeignKey to User) - 작성자
- `created_at` (DateTimeField, 자동) - 등록일시
- `updated_at` (DateTimeField, 자동) - 수정일시

## 서비스 함수

### 부적합 관리
- `NonconformanceListView` - 부적합 목록 조회 (날짜 범위, 업체명, 품명, NCR NO, 불량유형, 6M 카테고리 필터링 지원)
- `NonconformanceDetailView` - 부적합 상세 조회
- `NonconformanceCreateView` - 부적합 등록 (실무자 이상 권한 필요, 실시간 유효성 검사)
- `NonconformanceUpdateView` - 부적합 수정 (실무자 이상 권한 필요, 실시간 유효성 검사)
- `NonconformanceDeleteView` - 부적합 물리 삭제 (실무자 이상 권한 필요, 확인 모달 포함)

### 코드 테이블 조회
- `defect_types_list()` - 불량 유형 목록 조회
- `defect_causes_list()` - 발생 원인 목록 조회 (카테고리별 필터링 지원)
- `six_m_categories()` - 6M 카테고리 목록 조회
- `six_m_guide()` - 6M 분류 가이드 및 예시 정보 제공

### 코드 테이블 관리 (실무자 이상 권한 필요)
- `defect_type_create()` - 불량 유형 추가 (실무자 이상, 중복 체크, 감사 로그)
- `defect_type_delete()` - 불량 유형 삭제 (실무자 이상, 사용 중인 경우 삭제 불가, 감사 로그)
- `reorder_defect_types()` - 불량 유형 재정렬 (실무자 이상, code 필드 교환, 트랜잭션 처리, 감사 로그)
- `defect_cause_create()` - 발생 원인 추가 (실무자 이상, 중복 체크, 카테고리 유효성 검사, 감사 로그)
- `defect_cause_delete()` - 발생 원인 삭제 (실무자 이상, 사용 중인 경우 삭제 불가, 감사 로그)
- `reorder_defect_causes()` - 발생 원인 재정렬 (실무자 이상, 메이저 그룹 단위, code 필드 교환, 트랜잭션 처리, 감사 로그)
- `get_next_ncr_no()` - 다음 NCR NO 생성 (인증 필요, NCR-YYYY-NNN 형식, 연도별 순차 번호)

### CSV 다운로드
- `nonconformance_csv_export()` - 월별 부적합 데이터 CSV 다운로드 (인증 필요)
  - 년도/월 기준으로 데이터 조회
  - CSV 헤더: NCR NO, 유형, 발생일, 업체명, 품명, 관리번호, 부적합 수량, 단가, 가중치, 합계금액, 불량 유형, 발생 원인, 6M 카테고리, 발견공정, 공정/부서, 작업자, 근본원인, 비고, 등록자, 등록일시
  - UTF-8 BOM 포함 (Excel 한글 호환)
  - 감사 로그 기록 (EXPORT_NONCONFORMANCE)

## 기술적 세부사항

### 코드 재정렬 로직
1. **Primary Key로 code 사용**: DefectType, DefectCause 모델은 code 필드가 PK
2. **code 교환 방식**: 
   - 직접 수정 불가 → 삭제 후 재생성 방식 사용
   - 임시 코드(TEMP_SWAP_x)를 거쳐 순환 참조 문제 방지
   - 3단계 트랜잭션:
     1. 원본 코드 → 임시 코드 (외래키 이동 + 원본 삭제)
     2. 임시 코드 → 최종 코드 (외래키 이동 + 새 코드 생성)
     3. 임시 코드 삭제
3. **외래키 자동 업데이트**: Nonconformance, CustomerComplaint의 외래키가 자동으로 새 코드를 참조
4. **결과**: 기존 내역이 원래 선택했던 유형/원인을 계속 가리킴 (코드만 변경)

### Serializer 개선
- `SlugRelatedField` 사용으로 API에서 코드 문자열 직접 처리
- `NonconformanceListSerializer`에 모든 필드 포함 (모달 표시 완전성)